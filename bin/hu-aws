#!/usr/bin/env python

# Dummy driver for a simple CLI, which uses aws-cli
#
#   https://github.com/aws/aws-cli
#
# This simple code is mostly taken from awscli.clidriver
#
# 

import sys
import logging

import botocore.session
from botocore.hooks import first_non_none_response
from botocore.hooks import HierarchicalEmitter
from botocore import xform_name
from botocore.compat import copy_kwargs, OrderedDict

from awscli import clidriver

import awscli.clidriver
from awscli import EnvironmentVariables, __version__
from awscli.formatter import get_formatter
from awscli.paramfile import get_paramfile
from awscli.plugin import load_plugins
from awscli.argparser import MainArgParser
from awscli.argparser import ServiceArgParser
from awscli.argparser import OperationArgParser
#from awscli.help import ProviderHelpCommand
#from awscli.help import ServiceHelpCommand
#from awscli.help import OperationHelpCommand
from awscli.argprocess import unpack_cli_arg
import argparse

import json
import yaml
import string
from hu.command import command

LOG = logging.getLogger('hu-dummy')

def setup_awscli_driver():
    emitter = HierarchicalEmitter()
    session = botocore.session.Session(EnvironmentVariables, emitter)
    session.user_agent_name = 'aws-cli'
    session.user_agent_version = __version__
    load_plugins(session.full_config.get('plugins', {}), event_hooks=emitter)
    return awscli.clidriver.CLIDriver(session=session)
            
def main():
    # Create an aws-cli driver
    aws_driver = setup_awscli_driver()

    # Read in command line options as JSON    
    args_json = command()
    args=json.loads(args_json)

    # Very basic parsing to determine plugin and environment to use
    plugin_name = args['plugin']
    env_name = args['opts']['environment']
    stack_name = '%s-%s' % (plugin_name, env_name)
    cf_file='./plugins/%s/%s.cf' % (plugin_name, env_name)
    yaml_file = './plugins/%s/%s.yaml' % (plugin_name, env_name)
    
    f = open(yaml_file)
    paramsMap = yaml.safe_load(f)
    f.close()
 
    #params_string_array=[]
    #for key in dataMap.keys():
    #    params_string_array.append("--parameters")
    #    params_string_array.append("parameter_key=%s,parameter_value=%s" % (key, dataMap[key]))
    #params_string = string.join(yaml_string_array, " ")
    
    f = open(cf_file, 'r')
    template_content=f.read()
    f.close()

    # TODO: assemble a more interesting template 
    # TODO: create a parameters option 
    main_args=[
               'cloudformation', 
               'create-stack', 
               '--capabilities', 'CAPABILITY_IAM', 
               '--stack-name', stack_name, 
               '--template-body', template_content
               ]
    if len(paramsMap.keys()) > 0:
        main_args.append("--parameters")
        for key in paramsMap.keys():
            main_args.append("parameter_key=%s,parameter_value=%s" % (key, paramsMap[key]))
    
    print main_args
    return aws_driver.main(main_args)

if __name__ == '__main__':
    sys.exit(main())
    
